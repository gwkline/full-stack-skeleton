// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/gwkline/full-stack-skeleton/backend/types"
	mock "github.com/stretchr/testify/mock"
)

// ISearch is an autogenerated mock type for the ISearch type
type ISearch struct {
	mock.Mock
}

type ISearch_Expecter struct {
	mock *mock.Mock
}

func (_m *ISearch) EXPECT() *ISearch_Expecter {
	return &ISearch_Expecter{mock: &_m.Mock}
}

// Apples provides a mock function with given fields: ctx, input
func (_m *ISearch) Apples(ctx context.Context, input *types.ConnectionInput) (*types.AppleConnection, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Apples")
	}

	var r0 *types.AppleConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConnectionInput) (*types.AppleConnection, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConnectionInput) *types.AppleConnection); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AppleConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ConnectionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISearch_Apples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apples'
type ISearch_Apples_Call struct {
	*mock.Call
}

// Apples is a helper method to define mock.On call
//   - ctx context.Context
//   - input *types.ConnectionInput
func (_e *ISearch_Expecter) Apples(ctx interface{}, input interface{}) *ISearch_Apples_Call {
	return &ISearch_Apples_Call{Call: _e.mock.On("Apples", ctx, input)}
}

func (_c *ISearch_Apples_Call) Run(run func(ctx context.Context, input *types.ConnectionInput)) *ISearch_Apples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ConnectionInput))
	})
	return _c
}

func (_c *ISearch_Apples_Call) Return(_a0 *types.AppleConnection, _a1 error) *ISearch_Apples_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISearch_Apples_Call) RunAndReturn(run func(context.Context, *types.ConnectionInput) (*types.AppleConnection, error)) *ISearch_Apples_Call {
	_c.Call.Return(run)
	return _c
}

// NewISearch creates a new instance of ISearch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISearch(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISearch {
	mock := &ISearch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
