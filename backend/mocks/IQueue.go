// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	asynq "github.com/hibiken/asynq"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gwkline/full-stack-skeleton/backend/types"
)

// IQueue is an autogenerated mock type for the IQueue type
type IQueue struct {
	mock.Mock
}

type IQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *IQueue) EXPECT() *IQueue_Expecter {
	return &IQueue_Expecter{mock: &_m.Mock}
}

// ArchiveTask provides a mock function with given fields: ctx, queueName, taskId
func (_m *IQueue) ArchiveTask(ctx context.Context, queueName string, taskId string) error {
	ret := _m.Called(ctx, queueName, taskId)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, queueName, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IQueue_ArchiveTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveTask'
type IQueue_ArchiveTask_Call struct {
	*mock.Call
}

// ArchiveTask is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - taskId string
func (_e *IQueue_Expecter) ArchiveTask(ctx interface{}, queueName interface{}, taskId interface{}) *IQueue_ArchiveTask_Call {
	return &IQueue_ArchiveTask_Call{Call: _e.mock.On("ArchiveTask", ctx, queueName, taskId)}
}

func (_c *IQueue_ArchiveTask_Call) Run(run func(ctx context.Context, queueName string, taskId string)) *IQueue_ArchiveTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IQueue_ArchiveTask_Call) Return(_a0 error) *IQueue_ArchiveTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IQueue_ArchiveTask_Call) RunAndReturn(run func(context.Context, string, string) error) *IQueue_ArchiveTask_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields: ctx, name
func (_m *IQueue) Clear(ctx context.Context, name string) ([]*asynq.TaskInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 []*asynq.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*asynq.TaskInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*asynq.TaskInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*asynq.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQueue_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type IQueue_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *IQueue_Expecter) Clear(ctx interface{}, name interface{}) *IQueue_Clear_Call {
	return &IQueue_Clear_Call{Call: _e.mock.On("Clear", ctx, name)}
}

func (_c *IQueue_Clear_Call) Run(run func(ctx context.Context, name string)) *IQueue_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IQueue_Clear_Call) Return(_a0 []*asynq.TaskInfo, _a1 error) *IQueue_Clear_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQueue_Clear_Call) RunAndReturn(run func(context.Context, string) ([]*asynq.TaskInfo, error)) *IQueue_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, queueName, taskId
func (_m *IQueue) DeleteTask(ctx context.Context, queueName string, taskId string) error {
	ret := _m.Called(ctx, queueName, taskId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, queueName, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IQueue_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type IQueue_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - taskId string
func (_e *IQueue_Expecter) DeleteTask(ctx interface{}, queueName interface{}, taskId interface{}) *IQueue_DeleteTask_Call {
	return &IQueue_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, queueName, taskId)}
}

func (_c *IQueue_DeleteTask_Call) Run(run func(ctx context.Context, queueName string, taskId string)) *IQueue_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IQueue_DeleteTask_Call) Return(_a0 error) *IQueue_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IQueue_DeleteTask_Call) RunAndReturn(run func(context.Context, string, string) error) *IQueue_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, task, opts
func (_m *IQueue) Enqueue(ctx context.Context, task *asynq.Task, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, task)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *asynq.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *asynq.Task, ...asynq.Option) (*asynq.TaskInfo, error)); ok {
		return rf(ctx, task, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *asynq.Task, ...asynq.Option) *asynq.TaskInfo); ok {
		r0 = rf(ctx, task, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *asynq.Task, ...asynq.Option) error); ok {
		r1 = rf(ctx, task, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type IQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - task *asynq.Task
//   - opts ...asynq.Option
func (_e *IQueue_Expecter) Enqueue(ctx interface{}, task interface{}, opts ...interface{}) *IQueue_Enqueue_Call {
	return &IQueue_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx, task}, opts...)...)}
}

func (_c *IQueue_Enqueue_Call) Run(run func(ctx context.Context, task *asynq.Task, opts ...asynq.Option)) *IQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]asynq.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(asynq.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*asynq.Task), variadicArgs...)
	})
	return _c
}

func (_c *IQueue_Enqueue_Call) Return(_a0 *asynq.TaskInfo, _a1 error) *IQueue_Enqueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQueue_Enqueue_Call) RunAndReturn(run func(context.Context, *asynq.Task, ...asynq.Option) (*asynq.TaskInfo, error)) *IQueue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *IQueue) Get(ctx context.Context, name string) (*asynq.QueueInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *asynq.QueueInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*asynq.QueueInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *asynq.QueueInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.QueueInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IQueue_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IQueue_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *IQueue_Expecter) Get(ctx interface{}, name interface{}) *IQueue_Get_Call {
	return &IQueue_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *IQueue_Get_Call) Run(run func(ctx context.Context, name string)) *IQueue_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IQueue_Get_Call) Return(_a0 *asynq.QueueInfo, _a1 error) *IQueue_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IQueue_Get_Call) RunAndReturn(run func(context.Context, string) (*asynq.QueueInfo, error)) *IQueue_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RunTask provides a mock function with given fields: ctx, queueName, taskId
func (_m *IQueue) RunTask(ctx context.Context, queueName string, taskId string) error {
	ret := _m.Called(ctx, queueName, taskId)

	if len(ret) == 0 {
		panic("no return value specified for RunTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, queueName, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IQueue_RunTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTask'
type IQueue_RunTask_Call struct {
	*mock.Call
}

// RunTask is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - taskId string
func (_e *IQueue_Expecter) RunTask(ctx interface{}, queueName interface{}, taskId interface{}) *IQueue_RunTask_Call {
	return &IQueue_RunTask_Call{Call: _e.mock.On("RunTask", ctx, queueName, taskId)}
}

func (_c *IQueue_RunTask_Call) Run(run func(ctx context.Context, queueName string, taskId string)) *IQueue_RunTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IQueue_RunTask_Call) Return(_a0 error) *IQueue_RunTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IQueue_RunTask_Call) RunAndReturn(run func(context.Context, string, string) error) *IQueue_RunTask_Call {
	_c.Call.Return(run)
	return _c
}

// StartServer provides a mock function with given fields: ctx, workPkg
func (_m *IQueue) StartServer(ctx context.Context, workPkg types.IWorker) {
	_m.Called(ctx, workPkg)
}

// IQueue_StartServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartServer'
type IQueue_StartServer_Call struct {
	*mock.Call
}

// StartServer is a helper method to define mock.On call
//   - ctx context.Context
//   - workPkg types.IWorker
func (_e *IQueue_Expecter) StartServer(ctx interface{}, workPkg interface{}) *IQueue_StartServer_Call {
	return &IQueue_StartServer_Call{Call: _e.mock.On("StartServer", ctx, workPkg)}
}

func (_c *IQueue_StartServer_Call) Run(run func(ctx context.Context, workPkg types.IWorker)) *IQueue_StartServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.IWorker))
	})
	return _c
}

func (_c *IQueue_StartServer_Call) Return() *IQueue_StartServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IQueue_StartServer_Call) RunAndReturn(run func(context.Context, types.IWorker)) *IQueue_StartServer_Call {
	_c.Call.Return(run)
	return _c
}

// TogglePause provides a mock function with given fields: ctx, name
func (_m *IQueue) TogglePause(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TogglePause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IQueue_TogglePause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TogglePause'
type IQueue_TogglePause_Call struct {
	*mock.Call
}

// TogglePause is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *IQueue_Expecter) TogglePause(ctx interface{}, name interface{}) *IQueue_TogglePause_Call {
	return &IQueue_TogglePause_Call{Call: _e.mock.On("TogglePause", ctx, name)}
}

func (_c *IQueue_TogglePause_Call) Run(run func(ctx context.Context, name string)) *IQueue_TogglePause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IQueue_TogglePause_Call) Return(_a0 error) *IQueue_TogglePause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IQueue_TogglePause_Call) RunAndReturn(run func(context.Context, string) error) *IQueue_TogglePause_Call {
	_c.Call.Return(run)
	return _c
}

// NewIQueue creates a new instance of IQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *IQueue {
	mock := &IQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
