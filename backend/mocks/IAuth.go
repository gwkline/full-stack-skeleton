// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gwkline/full-stack-skeleton/backend/types"
)

// IAuth is an autogenerated mock type for the IAuth type
type IAuth struct {
	mock.Mock
}

type IAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *IAuth) EXPECT() *IAuth_Expecter {
	return &IAuth_Expecter{mock: &_m.Mock}
}

// CurrentUser provides a mock function with given fields: ctx
func (_m *IAuth) CurrentUser(ctx context.Context) (*types.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CurrentUser")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_CurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentUser'
type IAuth_CurrentUser_Call struct {
	*mock.Call
}

// CurrentUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IAuth_Expecter) CurrentUser(ctx interface{}) *IAuth_CurrentUser_Call {
	return &IAuth_CurrentUser_Call{Call: _e.mock.On("CurrentUser", ctx)}
}

func (_c *IAuth_CurrentUser_Call) Run(run func(ctx context.Context)) *IAuth_CurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IAuth_CurrentUser_Call) Return(_a0 *types.User, _a1 error) *IAuth_CurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_CurrentUser_Call) RunAndReturn(run func(context.Context) (*types.User, error)) *IAuth_CurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function with given fields: ctx, email, duration
func (_m *IAuth) GenerateToken(ctx context.Context, email string, duration time.Duration) (string, error) {
	ret := _m.Called(ctx, email, duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, email, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, email, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, email, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type IAuth_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - duration time.Duration
func (_e *IAuth_Expecter) GenerateToken(ctx interface{}, email interface{}, duration interface{}) *IAuth_GenerateToken_Call {
	return &IAuth_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, email, duration)}
}

func (_c *IAuth_GenerateToken_Call) Run(run func(ctx context.Context, email string, duration time.Duration)) *IAuth_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *IAuth_GenerateToken_Call) Return(_a0 string, _a1 error) *IAuth_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_GenerateToken_Call) RunAndReturn(run func(context.Context, string, time.Duration) (string, error)) *IAuth_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, li
func (_m *IAuth) Login(ctx context.Context, li types.LoginInput) (*types.JWT, error) {
	ret := _m.Called(ctx, li)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *types.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.LoginInput) (*types.JWT, error)); ok {
		return rf(ctx, li)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.LoginInput) *types.JWT); ok {
		r0 = rf(ctx, li)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.LoginInput) error); ok {
		r1 = rf(ctx, li)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type IAuth_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - li types.LoginInput
func (_e *IAuth_Expecter) Login(ctx interface{}, li interface{}) *IAuth_Login_Call {
	return &IAuth_Login_Call{Call: _e.mock.On("Login", ctx, li)}
}

func (_c *IAuth_Login_Call) Run(run func(ctx context.Context, li types.LoginInput)) *IAuth_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.LoginInput))
	})
	return _c
}

func (_c *IAuth_Login_Call) Return(_a0 *types.JWT, _a1 error) *IAuth_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_Login_Call) RunAndReturn(run func(context.Context, types.LoginInput) (*types.JWT, error)) *IAuth_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, jwt
func (_m *IAuth) RefreshToken(ctx context.Context, jwt types.JWT) (*types.JWT, error) {
	ret := _m.Called(ctx, jwt)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *types.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.JWT) (*types.JWT, error)); ok {
		return rf(ctx, jwt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.JWT) *types.JWT); ok {
		r0 = rf(ctx, jwt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.JWT) error); ok {
		r1 = rf(ctx, jwt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type IAuth_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - jwt types.JWT
func (_e *IAuth_Expecter) RefreshToken(ctx interface{}, jwt interface{}) *IAuth_RefreshToken_Call {
	return &IAuth_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, jwt)}
}

func (_c *IAuth_RefreshToken_Call) Run(run func(ctx context.Context, jwt types.JWT)) *IAuth_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.JWT))
	})
	return _c
}

func (_c *IAuth_RefreshToken_Call) Return(_a0 *types.JWT, _a1 error) *IAuth_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_RefreshToken_Call) RunAndReturn(run func(context.Context, types.JWT) (*types.JWT, error)) *IAuth_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetCurrentUser provides a mock function with given fields: ctx, user
func (_m *IAuth) SetCurrentUser(ctx context.Context, user *types.User) context.Context {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SetCurrentUser")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *types.User) context.Context); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// IAuth_SetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCurrentUser'
type IAuth_SetCurrentUser_Call struct {
	*mock.Call
}

// SetCurrentUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *types.User
func (_e *IAuth_Expecter) SetCurrentUser(ctx interface{}, user interface{}) *IAuth_SetCurrentUser_Call {
	return &IAuth_SetCurrentUser_Call{Call: _e.mock.On("SetCurrentUser", ctx, user)}
}

func (_c *IAuth_SetCurrentUser_Call) Run(run func(ctx context.Context, user *types.User)) *IAuth_SetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.User))
	})
	return _c
}

func (_c *IAuth_SetCurrentUser_Call) Return(_a0 context.Context) *IAuth_SetCurrentUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAuth_SetCurrentUser_Call) RunAndReturn(run func(context.Context, *types.User) context.Context) *IAuth_SetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: ctx, newuser, password
func (_m *IAuth) Signup(ctx context.Context, newuser types.User, password string) (*types.JWT, error) {
	ret := _m.Called(ctx, newuser, password)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *types.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.User, string) (*types.JWT, error)); ok {
		return rf(ctx, newuser, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.User, string) *types.JWT); ok {
		r0 = rf(ctx, newuser, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.User, string) error); ok {
		r1 = rf(ctx, newuser, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type IAuth_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - newuser types.User
//   - password string
func (_e *IAuth_Expecter) Signup(ctx interface{}, newuser interface{}, password interface{}) *IAuth_Signup_Call {
	return &IAuth_Signup_Call{Call: _e.mock.On("Signup", ctx, newuser, password)}
}

func (_c *IAuth_Signup_Call) Run(run func(ctx context.Context, newuser types.User, password string)) *IAuth_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.User), args[2].(string))
	})
	return _c
}

func (_c *IAuth_Signup_Call) Return(_a0 *types.JWT, _a1 error) *IAuth_Signup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_Signup_Call) RunAndReturn(run func(context.Context, types.User, string) (*types.JWT, error)) *IAuth_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: ctx, tokenStr
func (_m *IAuth) ValidateToken(ctx context.Context, tokenStr string) (*types.Claims, error) {
	ret := _m.Called(ctx, tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *types.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Claims, error)); ok {
		return rf(ctx, tokenStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Claims); ok {
		r0 = rf(ctx, tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuth_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type IAuth_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenStr string
func (_e *IAuth_Expecter) ValidateToken(ctx interface{}, tokenStr interface{}) *IAuth_ValidateToken_Call {
	return &IAuth_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, tokenStr)}
}

func (_c *IAuth_ValidateToken_Call) Run(run func(ctx context.Context, tokenStr string)) *IAuth_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IAuth_ValidateToken_Call) Return(_a0 *types.Claims, _a1 error) *IAuth_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuth_ValidateToken_Call) RunAndReturn(run func(context.Context, string) (*types.Claims, error)) *IAuth_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAuth creates a new instance of IAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuth {
	mock := &IAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
