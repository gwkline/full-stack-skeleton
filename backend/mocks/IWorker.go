// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	asynq "github.com/hibiken/asynq"

	mock "github.com/stretchr/testify/mock"
)

// IWorker is an autogenerated mock type for the IWorker type
type IWorker struct {
	mock.Mock
}

type IWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *IWorker) EXPECT() *IWorker_Expecter {
	return &IWorker_Expecter{mock: &_m.Mock}
}

// HandleProcessSomeDataTask provides a mock function with given fields: ctx, t
func (_m *IWorker) HandleProcessSomeDataTask(ctx context.Context, t *asynq.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for HandleProcessSomeDataTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *asynq.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IWorker_HandleProcessSomeDataTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleProcessSomeDataTask'
type IWorker_HandleProcessSomeDataTask_Call struct {
	*mock.Call
}

// HandleProcessSomeDataTask is a helper method to define mock.On call
//   - ctx context.Context
//   - t *asynq.Task
func (_e *IWorker_Expecter) HandleProcessSomeDataTask(ctx interface{}, t interface{}) *IWorker_HandleProcessSomeDataTask_Call {
	return &IWorker_HandleProcessSomeDataTask_Call{Call: _e.mock.On("HandleProcessSomeDataTask", ctx, t)}
}

func (_c *IWorker_HandleProcessSomeDataTask_Call) Run(run func(ctx context.Context, t *asynq.Task)) *IWorker_HandleProcessSomeDataTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*asynq.Task))
	})
	return _c
}

func (_c *IWorker_HandleProcessSomeDataTask_Call) Return(_a0 error) *IWorker_HandleProcessSomeDataTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorker_HandleProcessSomeDataTask_Call) RunAndReturn(run func(context.Context, *asynq.Task) error) *IWorker_HandleProcessSomeDataTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewIWorker creates a new instance of IWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWorker {
	mock := &IWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
